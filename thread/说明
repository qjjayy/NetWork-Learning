同步知识点补充：
	PrintStream类在内部要求大多数方法对PrintStream对象同步（例如System.out）
	Writer类都有自己的内部同步，但输入流和输出流并非如此，只有PrintStream有所例外
	即一般的输入流和输出流都有可能会被中断
	synchronized对对象本身同步，但并不总是对象本身需要防止同时修改或访问，如果只是对方法所属类的实例进行同步，可能并不能保护真正需要保护的对象，因为其他类也可能持有该类的引用（见书比较好理解）
同步的替代方式：
	1. 在可能的情况下，要使用局部变量而不是字段
	2. 基本类型的方法参数也可以在单独的线程中安全地修改，因为Java是按值而不是按引用来传递参数，同时这些纯有基本类型参数的方法应该声明为静态方法
	3. 对象类型的方法参数不能保证线程安全，因为Java按值传递的实际参数是对象的引用
	4. String、Integer、Double等参数是线程安全的，因为它是不可变的（final）,StingBuffer参数是线程不安全的，StringBuilder参数是线程安全的
	5. 自定义的类中将字段定义为不可变的，即private final ...
	6. 构造函数一般不需要担心线程安全问题，但是构造函数中还是要注意很多问题，比如不要在构造函数中开启其他线程，以免别的线程在构造函数还未结束的时候，就引用要构造的对象
	7. 将非线程安全的类用作为线程安全的类的一个私有字段·
	